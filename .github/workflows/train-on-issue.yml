name: testing issue trigger

on:
  issues:
    types: [opened, edited]
env:
  LABEL_MODEL_TRAINING: model-training
  LABEL_IN_PROGRESS: in progress
  LABEL_COMPLETED: completed
  LABEL_FAILED: failed
jobs:
  training:
    if: contains(github.event.issue.labels.*.name, 'model-training')
    runs-on: ubuntu-latest
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - uses: actions/checkout@v2
      - name: Get workflow run
        id: get-workflow-run
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const workflow_run = github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.run_id}}
            })
            return workflow_run
      - name: Get result
        env:
          workflow_run_obj: steps.get-workflow-run.outputs.result
          workflow_run: ${{ toJson(steps.get-workflow-run.outputs.result) }}
        run: |
          echo "something"
          echo "$workflow_run"
          echo "${{steps.get-workflow-run.outputs.result.html_url}}"

      - name: Get issue body
        id: get-issue-body
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            github.issues.get({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo
            }).then( (issue) => {
              var issueBody = issue.data.body
              var bodyKey = JSON.parse(issueBody)
              console.log(issueBody)
              console.log(bodyKey.yes)
              console.log(bodyKey.no)
              console.log("::set-env name=LABEL_COMPLETED::new success from GS")
              return issueBody
            })
      
      - name: pre print
        run: |
          echo "$LABEL_COMPLETED"
          echo "$LABEL_FAILED"
      
      - name: Update env
        env:
          new_json_txt: ${{ steps.get-issue-body.outputs.result }}
          new_json: ${{ toJson(steps.get-issue-body.outputs.result) }}
          new_success_label: ${{ toJson(steps.get-issue-body.outputs.result).yes }}
          new_failure_label: ${{ toJson(steps.get-issue-body.outputs.result).no }}
        run: |
          echo "$new_json"
          echo "::set-env name=LABEL_COMPLETED::new success"
          echo "::set-env name=LABEL_FAILED::$new_failure_label"
      
      - name: post print
        run: |
          echo "$LABEL_COMPLETED"
          echo "$LABEL_FAILED"

      - name: Mark issue as a pipeline trigger
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Training workflow started."
            })
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["model-training"]
            })

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Print pipeline report or failure
        uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs')
            try {
              issueBody = fs.readFileSync("./src/reporting/dummy.md", "utf8")
              returnLabel = process.env.label_completed
            } catch (err) {
              issueBody = "**Report file not found.**"
              returnLabel = process.env.label_failed
            }
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: issueBody
            })
            github.issues.removeLabel({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "model-training"
            })
            github.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ["final test"]
            })

